type token =
  | EOF
  | COMMA
  | LBRA
  | RBRA
  | LT
  | GT
  | COLON
  | SEMI
  | HAT
  | STAR
  | SLASH
  | LPAR
  | RPAR
  | GETS
  | PLUS
  | MINUS
  | DOT
  | LSQ
  | RSQ
  | WRONGTOKEN
  | NIL
  | IF
  | THEN
  | ELSE
  | ELSEIF
  | WHILE
  | DO
  | REPEAT
  | UNTIL
  | CASE
  | GLOBMATCH
  | OF
  | END
  | RETURN
  | LOCAL
  | FUNCTION
  | DOTS
  | ARROW
  | NUMBER of (float)
  | STRING of (string)
  | NAME of (string)
  | DEBUG_PRAGMA of (int)
  | AND
  | OR
  | EQ
  | NE
  | LE
  | GE
  | CONC
  | UNARY
  | NOT

open Parsing;;
let _ = parse_error;;
# 2 "luaparsex.mly"
  module type S = sig
    type chunk
    val chunks : (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> chunk list
  end
  module type MAKER = functor (Ast : Luaast.S) -> S with type chunk = Ast.chunk
  
  module MakeStandard (Ast : Luaast.S) = struct
    module A = Ast
    type chunk = Ast.chunk
# 67 "luaparsex.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* COMMA *);
  258 (* LBRA *);
  259 (* RBRA *);
  260 (* LT *);
  261 (* GT *);
  262 (* COLON *);
  263 (* SEMI *);
  264 (* HAT *);
  265 (* STAR *);
  266 (* SLASH *);
  267 (* LPAR *);
  268 (* RPAR *);
  269 (* GETS *);
  270 (* PLUS *);
  271 (* MINUS *);
  272 (* DOT *);
  273 (* LSQ *);
  274 (* RSQ *);
  275 (* WRONGTOKEN *);
  276 (* NIL *);
  277 (* IF *);
  278 (* THEN *);
  279 (* ELSE *);
  280 (* ELSEIF *);
  281 (* WHILE *);
  282 (* DO *);
  283 (* REPEAT *);
  284 (* UNTIL *);
  285 (* CASE *);
  286 (* GLOBMATCH *);
  287 (* OF *);
  288 (* END *);
  289 (* RETURN *);
  290 (* LOCAL *);
  291 (* FUNCTION *);
  292 (* DOTS *);
  293 (* ARROW *);
  298 (* AND *);
  299 (* OR *);
  300 (* EQ *);
  301 (* NE *);
  302 (* LE *);
  303 (* GE *);
  304 (* CONC *);
  305 (* UNARY *);
  306 (* NOT *);
    0|]

let yytransl_block = [|
  294 (* NUMBER *);
  295 (* STRING *);
  296 (* NAME *);
  297 (* DEBUG_PRAGMA *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\008\000\009\000\009\000\
\010\000\004\000\004\000\007\000\007\000\006\000\014\000\014\000\
\014\000\014\000\014\000\014\000\016\000\016\000\016\000\013\000\
\005\000\005\000\015\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\024\000\019\000\026\000\026\000\027\000\027\000\
\022\000\022\000\018\000\018\000\012\000\012\000\012\000\028\000\
\028\000\029\000\029\000\030\000\025\000\025\000\032\000\032\000\
\034\000\034\000\035\000\035\000\033\000\033\000\036\000\031\000\
\031\000\037\000\037\000\017\000\017\000\003\000\003\000\003\000\
\038\000\011\000\020\000\020\000\021\000\021\000\000\000"

let yylen = "\002\000\
\003\000\000\000\003\000\002\000\002\000\003\000\001\000\003\000\
\005\000\000\000\003\000\000\000\001\000\001\000\006\000\005\000\
\004\000\003\000\001\000\003\000\000\000\002\000\005\000\002\000\
\000\000\003\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\002\000\001\000\001\000\001\000\001\000\001\000\001\000\002\000\
\003\000\003\000\003\000\002\000\001\000\003\000\003\000\001\000\
\000\000\001\000\001\000\003\000\000\000\001\000\002\000\001\000\
\003\000\000\000\002\000\001\000\002\000\002\000\000\000\002\000\
\000\000\001\000\000\000\002\000\001\000\003\000\003\000\000\000\
\002\000\001\000\003\000\001\000\003\000\001\000\004\000\003\000\
\001\000\001\000\001\000\003\000\000\000\002\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\095\000\000\000\000\000\000\000\010\000\000\000\
\000\000\000\000\089\000\005\000\000\000\000\000\000\000\004\000\
\000\000\014\000\000\000\019\000\000\000\086\000\000\000\000\000\
\000\000\046\000\044\000\045\000\000\000\090\000\000\000\000\000\
\047\000\027\000\042\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\091\000\000\000\000\000\000\000\000\000\001\000\
\013\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\056\000\052\000\000\000\000\000\000\000\000\000\000\000\077\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\024\000\000\000\000\000\000\000\
\026\000\000\000\000\000\020\000\000\000\006\000\000\000\054\000\
\088\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\
\000\000\069\000\000\000\070\000\000\000\081\000\028\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\000\
\000\000\000\000\092\000\000\000\062\000\068\000\000\000\000\000\
\064\000\008\000\087\000\055\000\000\000\000\000\000\000\072\000\
\078\000\000\000\010\000\000\000\000\000\016\000\010\000\000\000\
\063\000\076\000\022\000\000\000\015\000\000\000\067\000\065\000\
\010\000\009\000\000\000\023\000"

let yydgoto = "\002\000\
\003\000\004\000\030\000\037\000\014\000\015\000\050\000\016\000\
\046\000\094\000\031\000\135\000\038\000\018\000\039\000\149\000\
\019\000\040\000\033\000\044\000\092\000\041\000\034\000\035\000\
\061\000\021\000\058\000\136\000\153\000\137\000\062\000\106\000\
\063\000\108\000\144\000\064\000\065\000\022\000"

let yysindex = "\007\000\
\000\000\000\000\000\000\253\254\005\255\005\255\000\000\005\255\
\230\254\244\254\000\000\000\000\000\000\039\000\046\255\000\000\
\116\255\000\000\016\255\000\000\052\255\000\000\089\255\005\255\
\005\255\000\000\000\000\000\000\005\255\000\000\116\255\126\255\
\000\000\000\000\000\000\171\255\209\003\033\255\005\004\097\255\
\046\255\000\000\000\000\051\255\000\000\094\255\143\255\000\000\
\000\000\000\000\081\255\104\255\005\255\244\254\005\255\005\255\
\000\000\000\000\124\255\005\004\163\255\175\255\149\255\000\000\
\166\255\177\255\179\255\179\255\005\255\005\255\005\255\005\255\
\005\255\005\255\005\255\000\000\005\255\005\255\005\255\005\255\
\005\255\005\255\005\255\000\000\000\000\046\255\005\255\005\255\
\000\000\159\255\005\255\000\000\102\255\000\000\162\255\000\000\
\000\000\186\255\000\000\147\255\097\255\209\255\005\255\000\000\
\183\255\000\000\183\255\000\000\005\255\000\000\000\000\026\255\
\026\255\179\255\179\255\179\255\200\255\200\255\154\255\058\004\
\058\004\026\255\026\255\026\255\026\255\197\255\192\255\000\000\
\005\004\000\000\000\000\097\255\000\000\000\000\223\255\202\255\
\000\000\000\000\000\000\000\000\005\004\124\255\149\255\000\000\
\000\000\005\004\000\000\005\255\193\255\000\000\000\000\107\255\
\000\000\000\000\000\000\246\003\000\000\195\255\000\000\000\000\
\000\000\000\000\154\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\198\000\000\000\000\000\000\000\053\002\
\000\000\000\000\000\000\000\000\053\003\000\000\212\003\000\000\
\054\255\000\000\000\000\000\000\000\000\000\000\085\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
\000\000\000\000\000\000\000\000\160\255\000\000\000\000\082\003\
\127\001\133\001\000\000\121\003\078\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\225\255\
\000\000\000\000\109\255\059\255\000\000\241\255\242\255\000\000\
\155\255\013\004\049\000\097\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\215\255\000\000\000\000\
\000\000\000\000\000\000\000\000\234\255\000\000\000\000\000\000\
\000\000\000\000\086\255\000\000\144\003\000\000\000\000\000\000\
\247\255\000\000\248\255\000\000\158\255\000\000\000\000\021\002\
\068\002\145\000\193\000\241\000\037\001\085\001\220\255\050\003\
\097\003\115\002\162\002\210\002\002\003\229\001\000\000\000\000\
\168\003\181\001\000\000\191\003\000\000\000\000\000\000\244\255\
\000\000\000\000\000\000\000\000\105\255\000\000\242\255\000\000\
\000\000\219\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\220\255\000\000"

let yygindex = "\000\000\
\000\000\000\000\252\255\000\000\216\000\217\000\217\255\000\000\
\000\000\000\000\005\000\000\000\191\255\000\000\254\255\094\000\
\000\000\213\255\009\000\000\000\000\000\207\000\002\000\249\000\
\000\000\000\000\000\000\000\000\000\000\121\000\000\000\000\000\
\169\000\196\255\000\000\170\000\000\000\000\000"

let yytablesize = 1386
let yytable = "\013\000\
\043\000\089\000\032\000\036\000\110\000\045\000\023\000\001\000\
\017\000\042\000\119\000\101\000\020\000\043\000\047\000\024\000\
\054\000\005\000\127\000\025\000\060\000\006\000\067\000\007\000\
\026\000\066\000\068\000\011\000\055\000\008\000\009\000\010\000\
\013\000\071\000\072\000\073\000\011\000\012\000\048\000\074\000\
\075\000\017\000\027\000\028\000\011\000\020\000\128\000\132\000\
\041\000\099\000\098\000\090\000\049\000\023\000\029\000\053\000\
\042\000\042\000\100\000\082\000\087\000\082\000\056\000\091\000\
\053\000\082\000\112\000\113\000\114\000\115\000\116\000\117\000\
\118\000\083\000\120\000\121\000\122\000\123\000\124\000\125\000\
\126\000\155\000\154\000\090\000\129\000\158\000\085\000\080\000\
\007\000\130\000\023\000\080\000\042\000\090\000\090\000\163\000\
\048\000\088\000\085\000\024\000\141\000\090\000\090\000\025\000\
\093\000\079\000\146\000\079\000\026\000\089\000\089\000\089\000\
\089\000\089\000\089\000\089\000\089\000\089\000\089\000\089\000\
\096\000\051\000\089\000\089\000\089\000\089\000\027\000\028\000\
\059\000\069\000\070\000\052\000\053\000\071\000\072\000\073\000\
\103\000\133\000\029\000\074\000\075\000\134\000\159\000\097\000\
\039\000\156\000\134\000\076\000\095\000\107\000\089\000\089\000\
\089\000\089\000\089\000\089\000\089\000\073\000\052\000\053\000\
\074\000\073\000\052\000\053\000\074\000\104\000\109\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\069\000\070\000\
\147\000\148\000\071\000\072\000\073\000\105\000\025\000\025\000\
\074\000\075\000\071\000\025\000\111\000\069\000\070\000\025\000\
\037\000\071\000\072\000\073\000\084\000\025\000\131\000\074\000\
\075\000\138\000\152\000\139\000\071\000\072\000\073\000\071\000\
\072\000\073\000\074\000\075\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\083\000\140\000\083\000\142\000\150\000\
\157\000\083\000\162\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\151\000\012\000\057\000\012\000\012\000\012\000\
\038\000\012\000\012\000\071\000\073\000\061\000\012\000\012\000\
\012\000\075\000\074\000\021\000\085\000\086\000\012\000\066\000\
\164\000\043\000\053\000\043\000\043\000\043\000\102\000\043\000\
\043\000\043\000\043\000\053\000\043\000\057\000\043\000\043\000\
\160\000\143\000\043\000\000\000\145\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\000\000\000\000\000\000\
\043\000\043\000\043\000\043\000\035\000\000\000\000\000\000\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\041\000\000\000\041\000\041\000\041\000\000\000\041\000\
\000\000\041\000\041\000\000\000\041\000\000\000\041\000\041\000\
\000\000\000\000\041\000\000\000\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\000\000\000\000\000\000\
\041\000\041\000\041\000\041\000\036\000\000\000\000\000\000\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\048\000\000\000\048\000\048\000\048\000\000\000\048\000\
\000\000\048\000\048\000\000\000\048\000\000\000\048\000\048\000\
\000\000\000\000\048\000\000\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\000\000\012\000\000\000\
\048\000\048\000\048\000\048\000\059\000\000\000\000\000\000\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\039\000\000\000\039\000\039\000\039\000\000\000\039\000\
\000\000\039\000\039\000\000\000\039\000\000\000\039\000\039\000\
\000\000\000\000\039\000\000\000\000\000\039\000\039\000\039\000\
\039\000\039\000\039\000\039\000\039\000\000\000\000\000\000\000\
\039\000\039\000\039\000\039\000\060\000\000\000\000\000\000\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
\039\000\037\000\000\000\037\000\037\000\037\000\000\000\037\000\
\000\000\037\000\037\000\000\000\037\000\000\000\037\000\037\000\
\000\000\000\000\037\000\000\000\000\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\000\000\000\000\000\000\
\037\000\037\000\037\000\037\000\040\000\000\000\000\000\000\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\038\000\000\000\038\000\038\000\038\000\000\000\038\000\
\000\000\038\000\038\000\000\000\038\000\000\000\038\000\038\000\
\000\000\000\000\038\000\000\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\000\000\000\000\000\000\
\038\000\038\000\038\000\038\000\030\000\000\000\000\000\000\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\000\000\000\000\000\000\000\000\035\000\000\000\035\000\
\035\000\035\000\000\000\035\000\000\000\000\000\000\000\000\000\
\035\000\000\000\035\000\035\000\057\000\000\000\035\000\000\000\
\000\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\000\000\000\000\031\000\035\000\035\000\035\000\035\000\
\000\000\000\000\000\000\000\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\036\000\000\000\036\000\
\036\000\036\000\000\000\036\000\000\000\000\000\000\000\000\000\
\036\000\000\000\036\000\036\000\000\000\000\000\036\000\000\000\
\000\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\000\000\029\000\000\000\036\000\036\000\036\000\036\000\
\000\000\000\000\000\000\000\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\059\000\000\000\000\000\
\027\000\027\000\000\000\059\000\027\000\027\000\027\000\000\000\
\059\000\000\000\027\000\027\000\000\000\012\000\012\000\000\000\
\000\000\059\000\012\000\059\000\059\000\059\000\012\000\059\000\
\059\000\032\000\000\000\000\000\059\000\059\000\059\000\059\000\
\000\000\000\000\000\000\000\000\059\000\059\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\060\000\000\000\000\000\
\027\000\027\000\000\000\060\000\027\000\027\000\027\000\000\000\
\060\000\000\000\027\000\027\000\000\000\000\000\000\000\000\000\
\000\000\060\000\000\000\060\000\060\000\060\000\000\000\060\000\
\060\000\033\000\000\000\000\000\060\000\060\000\060\000\060\000\
\000\000\000\000\000\000\000\000\060\000\060\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\040\000\000\000\040\000\
\040\000\040\000\000\000\040\000\000\000\000\000\000\000\000\000\
\040\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\
\000\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\034\000\000\000\000\000\040\000\040\000\040\000\040\000\
\000\000\000\000\000\000\000\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\030\000\000\000\030\000\
\030\000\030\000\000\000\030\000\000\000\000\000\000\000\000\000\
\030\000\000\000\000\000\000\000\000\000\000\000\030\000\000\000\
\000\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\049\000\000\000\000\000\030\000\030\000\030\000\030\000\
\000\000\000\000\000\000\057\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\031\000\000\000\031\000\031\000\
\031\000\000\000\031\000\057\000\057\000\000\000\000\000\031\000\
\057\000\058\000\000\000\000\000\057\000\031\000\000\000\000\000\
\031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
\050\000\000\000\000\000\031\000\031\000\031\000\031\000\000\000\
\000\000\000\000\000\000\031\000\031\000\031\000\031\000\031\000\
\031\000\031\000\031\000\029\000\000\000\029\000\029\000\029\000\
\093\000\029\000\000\000\000\000\000\000\000\000\029\000\000\000\
\000\000\000\000\000\000\000\000\029\000\000\000\000\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\018\000\
\000\000\000\000\029\000\029\000\029\000\029\000\000\000\000\000\
\000\000\000\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\032\000\000\000\032\000\032\000\032\000\017\000\
\032\000\000\000\000\000\000\000\000\000\032\000\000\000\000\000\
\000\000\000\000\000\000\032\000\000\000\000\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\032\000\094\000\000\000\
\000\000\032\000\032\000\032\000\032\000\000\000\000\000\000\000\
\000\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\000\000\033\000\012\000\033\000\033\000\033\000\000\000\
\033\000\000\000\000\000\000\000\000\000\033\000\000\000\000\000\
\000\000\000\000\000\000\033\000\000\000\000\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\000\000\000\000\
\000\000\033\000\033\000\033\000\033\000\000\000\000\000\000\000\
\000\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\000\000\034\000\000\000\034\000\034\000\034\000\000\000\
\034\000\000\000\000\000\000\000\000\000\034\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\000\000\034\000\034\000\
\034\000\034\000\034\000\034\000\034\000\034\000\000\000\000\000\
\000\000\034\000\034\000\034\000\034\000\000\000\000\000\000\000\
\000\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
\034\000\000\000\049\000\000\000\049\000\084\000\090\000\000\000\
\049\000\000\000\090\000\000\000\000\000\049\000\000\000\090\000\
\000\000\084\000\000\000\049\000\090\000\090\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\000\000\000\000\
\000\000\049\000\049\000\049\000\049\000\000\000\000\000\000\000\
\058\000\049\000\049\000\049\000\049\000\058\000\000\000\000\000\
\000\000\050\000\000\000\050\000\000\000\000\000\000\000\050\000\
\058\000\058\000\000\000\000\000\050\000\058\000\000\000\000\000\
\000\000\058\000\050\000\000\000\000\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\000\000\000\000\093\000\
\050\000\050\000\050\000\050\000\000\000\000\000\000\000\000\000\
\050\000\050\000\050\000\050\000\000\000\093\000\000\000\093\000\
\093\000\093\000\000\000\093\000\093\000\000\000\018\000\000\000\
\093\000\093\000\093\000\093\000\000\000\000\000\000\000\000\000\
\093\000\093\000\000\000\000\000\018\000\000\000\018\000\018\000\
\018\000\000\000\018\000\018\000\000\000\000\000\017\000\018\000\
\018\000\018\000\018\000\000\000\000\000\000\000\000\000\018\000\
\018\000\000\000\000\000\000\000\017\000\000\000\017\000\017\000\
\017\000\000\000\017\000\017\000\000\000\094\000\000\000\017\000\
\017\000\017\000\017\000\000\000\000\000\000\000\000\000\017\000\
\017\000\000\000\000\000\094\000\000\000\094\000\094\000\094\000\
\000\000\094\000\094\000\000\000\000\000\000\000\094\000\094\000\
\094\000\094\000\000\000\000\000\000\000\005\000\094\000\094\000\
\012\000\006\000\000\000\007\000\012\000\000\000\012\000\000\000\
\000\000\008\000\009\000\000\000\012\000\012\000\012\000\000\000\
\011\000\069\000\070\000\012\000\012\000\071\000\072\000\073\000\
\000\000\000\000\000\000\074\000\075\000\000\000\000\000\000\000\
\069\000\070\000\000\000\161\000\071\000\072\000\073\000\000\000\
\027\000\027\000\074\000\075\000\027\000\027\000\027\000\000\000\
\000\000\000\000\027\000\027\000\000\000\000\000\000\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\000\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\069\000\070\000\000\000\
\000\000\071\000\072\000\073\000\000\000\000\000\000\000\074\000\
\075\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\079\000\080\000\081\000\
\082\000\083\000"

let yycheck = "\004\000\
\000\000\041\000\005\000\006\000\065\000\010\000\002\001\001\000\
\004\000\008\000\076\000\055\000\004\000\040\001\010\000\011\001\
\001\001\021\001\084\000\015\001\023\000\025\001\025\000\027\001\
\020\001\024\000\029\000\040\001\013\001\033\001\034\001\035\001\
\037\000\008\001\009\001\010\001\040\001\041\001\000\000\014\001\
\015\001\037\000\038\001\039\001\040\001\037\000\086\000\091\000\
\000\000\054\000\053\000\001\001\007\001\002\001\050\001\002\001\
\055\000\056\000\054\000\001\001\028\001\003\001\011\001\013\001\
\011\001\007\001\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\048\001\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\147\000\143\000\006\001\087\000\151\000\001\001\003\001\
\011\001\088\000\002\001\007\001\091\000\016\001\017\001\161\000\
\000\000\001\001\013\001\011\001\103\000\016\001\017\001\015\001\
\011\001\001\001\109\000\003\001\020\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\040\001\006\001\014\001\015\001\016\001\017\001\038\001\039\001\
\040\001\004\001\005\001\016\001\017\001\008\001\009\001\010\001\
\013\001\036\001\050\001\014\001\015\001\040\001\036\001\040\001\
\000\000\148\000\040\001\022\001\006\001\001\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\003\001\016\001\017\001\
\003\001\007\001\016\001\017\001\007\001\003\001\001\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\004\001\005\001\
\023\001\024\001\008\001\009\001\010\001\007\001\023\001\024\001\
\014\001\015\001\008\001\028\001\012\001\004\001\005\001\032\001\
\000\000\008\001\009\001\010\001\026\001\000\000\040\001\014\001\
\015\001\040\001\001\001\018\001\008\001\009\001\010\001\008\001\
\009\001\010\001\014\001\015\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\001\001\012\001\003\001\040\001\032\001\
\032\001\007\001\032\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\012\001\021\001\012\001\023\001\024\001\025\001\
\000\000\027\001\028\001\003\001\003\001\012\001\032\001\033\001\
\034\001\003\001\003\001\032\001\037\000\037\000\040\001\012\001\
\163\000\001\001\002\001\003\001\004\001\005\001\056\000\007\001\
\008\001\009\001\010\001\011\001\012\001\021\000\014\001\015\001\
\152\000\105\000\018\001\255\255\107\000\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\000\000\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\001\001\255\255\003\001\004\001\005\001\255\255\007\001\
\255\255\009\001\010\001\255\255\012\001\255\255\014\001\015\001\
\255\255\255\255\018\001\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\000\000\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\001\001\255\255\003\001\004\001\005\001\255\255\007\001\
\255\255\009\001\010\001\255\255\012\001\255\255\014\001\015\001\
\255\255\255\255\018\001\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\000\000\255\255\
\032\001\033\001\034\001\035\001\000\000\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\001\001\255\255\003\001\004\001\005\001\255\255\007\001\
\255\255\009\001\010\001\255\255\012\001\255\255\014\001\015\001\
\255\255\255\255\018\001\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\000\000\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\001\001\255\255\003\001\004\001\005\001\255\255\007\001\
\255\255\009\001\010\001\255\255\012\001\255\255\014\001\015\001\
\255\255\255\255\018\001\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\000\000\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\001\001\255\255\003\001\004\001\005\001\255\255\007\001\
\255\255\009\001\010\001\255\255\012\001\255\255\014\001\015\001\
\255\255\255\255\018\001\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\255\255\
\032\001\033\001\034\001\035\001\000\000\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\255\255\255\255\255\255\255\255\001\001\255\255\003\001\
\004\001\005\001\255\255\007\001\255\255\255\255\255\255\255\255\
\012\001\255\255\014\001\015\001\000\000\255\255\018\001\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\255\255\000\000\032\001\033\001\034\001\035\001\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\001\001\255\255\003\001\
\004\001\005\001\255\255\007\001\255\255\255\255\255\255\255\255\
\012\001\255\255\014\001\015\001\255\255\255\255\018\001\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\255\255\000\000\255\255\032\001\033\001\034\001\035\001\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\001\001\255\255\255\255\
\004\001\005\001\255\255\007\001\008\001\009\001\010\001\255\255\
\012\001\255\255\014\001\015\001\255\255\023\001\024\001\255\255\
\255\255\021\001\028\001\023\001\024\001\025\001\032\001\027\001\
\028\001\000\000\255\255\255\255\032\001\033\001\034\001\035\001\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\001\001\255\255\255\255\
\004\001\005\001\255\255\007\001\008\001\009\001\010\001\255\255\
\012\001\255\255\014\001\015\001\255\255\255\255\255\255\255\255\
\255\255\021\001\255\255\023\001\024\001\025\001\255\255\027\001\
\028\001\000\000\255\255\255\255\032\001\033\001\034\001\035\001\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\001\001\255\255\003\001\
\004\001\005\001\255\255\007\001\255\255\255\255\255\255\255\255\
\012\001\255\255\255\255\255\255\255\255\255\255\018\001\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\000\000\255\255\255\255\032\001\033\001\034\001\035\001\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\001\001\255\255\003\001\
\004\001\005\001\255\255\007\001\255\255\255\255\255\255\255\255\
\012\001\255\255\255\255\255\255\255\255\255\255\018\001\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\000\000\255\255\255\255\032\001\033\001\034\001\035\001\
\255\255\255\255\255\255\007\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\001\001\255\255\003\001\004\001\
\005\001\255\255\007\001\023\001\024\001\255\255\255\255\012\001\
\028\001\000\000\255\255\255\255\032\001\018\001\255\255\255\255\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\028\001\
\000\000\255\255\255\255\032\001\033\001\034\001\035\001\255\255\
\255\255\255\255\255\255\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\001\001\255\255\003\001\004\001\005\001\
\000\000\007\001\255\255\255\255\255\255\255\255\012\001\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\000\000\
\255\255\255\255\032\001\033\001\034\001\035\001\255\255\255\255\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\001\001\255\255\003\001\004\001\005\001\000\000\
\007\001\255\255\255\255\255\255\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\018\001\255\255\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\000\000\255\255\
\255\255\032\001\033\001\034\001\035\001\255\255\255\255\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\255\255\001\001\000\000\003\001\004\001\005\001\255\255\
\007\001\255\255\255\255\255\255\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\018\001\255\255\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\255\255\032\001\033\001\034\001\035\001\255\255\255\255\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\255\255\001\001\255\255\003\001\004\001\005\001\255\255\
\007\001\255\255\255\255\255\255\255\255\012\001\255\255\255\255\
\255\255\255\255\255\255\018\001\255\255\255\255\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\255\255\032\001\033\001\034\001\035\001\255\255\255\255\255\255\
\255\255\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\255\255\001\001\255\255\003\001\001\001\002\001\255\255\
\007\001\255\255\006\001\255\255\255\255\012\001\255\255\011\001\
\255\255\013\001\255\255\018\001\016\001\017\001\021\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\255\255\255\255\
\255\255\032\001\033\001\034\001\035\001\255\255\255\255\255\255\
\007\001\040\001\041\001\042\001\043\001\012\001\255\255\255\255\
\255\255\001\001\255\255\003\001\255\255\255\255\255\255\007\001\
\023\001\024\001\255\255\255\255\012\001\028\001\255\255\255\255\
\255\255\032\001\018\001\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\255\255\007\001\
\032\001\033\001\034\001\035\001\255\255\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\255\255\021\001\255\255\023\001\
\024\001\025\001\255\255\027\001\028\001\255\255\007\001\255\255\
\032\001\033\001\034\001\035\001\255\255\255\255\255\255\255\255\
\040\001\041\001\255\255\255\255\021\001\255\255\023\001\024\001\
\025\001\255\255\027\001\028\001\255\255\255\255\007\001\032\001\
\033\001\034\001\035\001\255\255\255\255\255\255\255\255\040\001\
\041\001\255\255\255\255\255\255\021\001\255\255\023\001\024\001\
\025\001\255\255\027\001\028\001\255\255\007\001\255\255\032\001\
\033\001\034\001\035\001\255\255\255\255\255\255\255\255\040\001\
\041\001\255\255\255\255\021\001\255\255\023\001\024\001\025\001\
\255\255\027\001\028\001\255\255\255\255\255\255\032\001\033\001\
\034\001\035\001\255\255\255\255\255\255\021\001\040\001\041\001\
\021\001\025\001\255\255\027\001\025\001\255\255\027\001\255\255\
\255\255\033\001\034\001\255\255\033\001\034\001\035\001\255\255\
\040\001\004\001\005\001\040\001\041\001\008\001\009\001\010\001\
\255\255\255\255\255\255\014\001\015\001\255\255\255\255\255\255\
\004\001\005\001\255\255\022\001\008\001\009\001\010\001\255\255\
\004\001\005\001\014\001\015\001\008\001\009\001\010\001\255\255\
\255\255\255\255\014\001\015\001\255\255\255\255\255\255\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\255\255\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\004\001\005\001\255\255\
\255\255\008\001\009\001\010\001\255\255\255\255\255\255\014\001\
\015\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\044\001\045\001\046\001\
\047\001\048\001"

let yynames_const = "\
  EOF\000\
  COMMA\000\
  LBRA\000\
  RBRA\000\
  LT\000\
  GT\000\
  COLON\000\
  SEMI\000\
  HAT\000\
  STAR\000\
  SLASH\000\
  LPAR\000\
  RPAR\000\
  GETS\000\
  PLUS\000\
  MINUS\000\
  DOT\000\
  LSQ\000\
  RSQ\000\
  WRONGTOKEN\000\
  NIL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  ELSEIF\000\
  WHILE\000\
  DO\000\
  REPEAT\000\
  UNTIL\000\
  CASE\000\
  GLOBMATCH\000\
  OF\000\
  END\000\
  RETURN\000\
  LOCAL\000\
  FUNCTION\000\
  DOTS\000\
  ARROW\000\
  AND\000\
  OR\000\
  EQ\000\
  NE\000\
  LE\000\
  GE\000\
  CONC\000\
  UNARY\000\
  NOT\000\
  "

let yynames_block = "\
  NUMBER\000\
  STRING\000\
  NAME\000\
  DEBUG_PRAGMA\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.chunk list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.stmt list) in
    Obj.repr(
# 54 "luaparsex.mly"
                            ( List.rev (List.map (fun s -> A.Statement s) _2 @ _1) )
# 654 "luaparsex.ml"
               : Ast.chunk list))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "luaparsex.mly"
                               ( [] )
# 660 "luaparsex.ml"
               : Ast.chunk list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.chunk list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sc) in
    Obj.repr(
# 57 "luaparsex.mly"
                            ( A.Statement _2    :: _1 )
# 669 "luaparsex.ml"
               : Ast.chunk list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.chunk list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'function_) in
    Obj.repr(
# 58 "luaparsex.mly"
                            ( _2                :: _1 )
# 677 "luaparsex.ml"
               : Ast.chunk list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.chunk list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 59 "luaparsex.mly"
                                   ( A.Debug (_2 <> 0) :: _1 )
# 685 "luaparsex.ml"
               : Ast.chunk list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'funcname) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'body) in
    Obj.repr(
# 62 "luaparsex.mly"
                                        ( _2 _3 (Parsing.symbol_start()) )
# 693 "luaparsex.ml"
               : 'function_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.lval) in
    Obj.repr(
# 64 "luaparsex.mly"
                            ( fun ((args, v), ss) w -> A.Fundef (w, _1, args, v, ss) )
# 700 "luaparsex.ml"
               : 'funcname))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 65 "luaparsex.mly"
                       ( fun ((args, v), ss) w -> A.Methdef (w, _1, _3, args, v, ss) )
# 708 "luaparsex.ml"
               : 'funcname))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'parlist) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    Obj.repr(
# 68 "luaparsex.mly"
                                    ( (_2, _4 ) )
# 716 "luaparsex.ml"
               : 'body))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "luaparsex.mly"
                               ( [] )
# 722 "luaparsex.ml"
               : Ast.stmt list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.stmt list) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sc) in
    Obj.repr(
# 71 "luaparsex.mly"
                        ( _1 @ [_2] )
# 731 "luaparsex.ml"
               : Ast.stmt list))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "luaparsex.mly"
                  ( () )
# 737 "luaparsex.ml"
               : 'sc))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "luaparsex.mly"
                                ( () )
# 743 "luaparsex.ml"
               : 'sc))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stat_) in
    Obj.repr(
# 76 "luaparsex.mly"
               ( A.Stmt' (Parsing.symbol_start (), _1) )
# 750 "luaparsex.ml"
               : 'stat))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr1) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'elsepart) in
    Obj.repr(
# 77 "luaparsex.mly"
                                          ( let (a, e) = _5 in A.If (_2, _4, a, e) )
# 759 "luaparsex.ml"
               : 'stat_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr1) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    Obj.repr(
# 82 "luaparsex.mly"
                                    ( A.WhileDo (_2, _4) )
# 767 "luaparsex.ml"
               : 'stat_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'block) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 83 "luaparsex.mly"
                                    ( A.RepeatUntil (_2, _4) )
# 775 "luaparsex.ml"
               : 'stat_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varlist1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprlist1) in
    Obj.repr(
# 84 "luaparsex.mly"
                                     ( A.Assign (_1, _3) )
# 783 "luaparsex.ml"
               : 'stat_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'functioncall) in
    Obj.repr(
# 85 "luaparsex.mly"
                                    ( A.Callstmt _1 )
# 790 "luaparsex.ml"
               : 'stat_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'localdeclist) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'decinit) in
    Obj.repr(
# 86 "luaparsex.mly"
                                    ( A.Local (_2, _3) )
# 798 "luaparsex.ml"
               : 'stat_))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "luaparsex.mly"
                          ( ([], None) )
# 804 "luaparsex.ml"
               : 'elsepart))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'block) in
    Obj.repr(
# 89 "luaparsex.mly"
                   ( ([], Some _2) )
# 811 "luaparsex.ml"
               : 'elsepart))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr1) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'block) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'elsepart) in
    Obj.repr(
# 90 "luaparsex.mly"
                                            ( let (a, e) = _5 in ((_2, _4)::a, e) )
# 820 "luaparsex.ml"
               : 'elsepart))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.stmt list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.stmt list) in
    Obj.repr(
# 91 "luaparsex.mly"
                         ( _1 @ _2 )
# 828 "luaparsex.ml"
               : 'block))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "luaparsex.mly"
                           ( [] )
# 834 "luaparsex.ml"
               : Ast.stmt list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprlist) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'sc) in
    Obj.repr(
# 94 "luaparsex.mly"
                               ( [A.Return _2] )
# 842 "luaparsex.ml"
               : Ast.stmt list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "luaparsex.mly"
              ( _1 )
# 849 "luaparsex.ml"
               : 'expr1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 99 "luaparsex.mly"
                        ( _2 )
# 856 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 100 "luaparsex.mly"
                        ( A.Binop (_1, A.Eq, _3) )
# 864 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 101 "luaparsex.mly"
                      ( A.Binop (_1, A.Lt, _3) )
# 872 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 102 "luaparsex.mly"
                      ( A.Binop (_1, A.Gt, _3) )
# 880 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 103 "luaparsex.mly"
                       ( A.Binop (_1, A.Ne, _3) )
# 888 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 104 "luaparsex.mly"
                       ( A.Binop (_1, A.Le, _3) )
# 896 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 105 "luaparsex.mly"
                       ( A.Binop (_1, A.Ge, _3) )
# 904 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 106 "luaparsex.mly"
                        ( A.Binop (_1, A.Plus,  _3) )
# 912 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 107 "luaparsex.mly"
                         ( A.Binop (_1, A.Minus, _3) )
# 920 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 108 "luaparsex.mly"
                        ( A.Binop (_1, A.Times, _3) )
# 928 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 109 "luaparsex.mly"
                         ( A.Binop (_1, A.Div,   _3) )
# 936 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 110 "luaparsex.mly"
                       ( A.Binop (_1, A.Pow,   _3) )
# 944 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 111 "luaparsex.mly"
                        ( A.Binop (_1, A.Concat, _3) )
# 952 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 112 "luaparsex.mly"
                               ( A.Unop (A.Minus, _2) )
# 959 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'table) in
    Obj.repr(
# 113 "luaparsex.mly"
                                ( _1 )
# 966 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'varexp) in
    Obj.repr(
# 114 "luaparsex.mly"
                        ( _1 )
# 973 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 115 "luaparsex.mly"
                        ( A.Lit (A.Value.Number _1) )
# 980 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 116 "luaparsex.mly"
                        ( A.Lit (A.Value.String _1) )
# 987 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "luaparsex.mly"
            ( A.Lit (A.Value.Nil)       )
# 993 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'functioncall) in
    Obj.repr(
# 118 "luaparsex.mly"
                        ( A.Call _1 )
# 1000 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 119 "luaparsex.mly"
                 ( A.Unop (A.Not, _2) )
# 1007 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 120 "luaparsex.mly"
                       ( A.Binop (_1, A.And, _3) )
# 1015 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 121 "luaparsex.mly"
                       ( A.Binop (_1, A.Or,  _3) )
# 1023 "luaparsex.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'fieldlist) in
    Obj.repr(
# 124 "luaparsex.mly"
                            ( let (l, b) = _2 in A.Table (l, b) )
# 1030 "luaparsex.ml"
               : 'table))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'funcvalue) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'funcParams) in
    Obj.repr(
# 126 "luaparsex.mly"
                                    ( _1 _2 )
# 1038 "luaparsex.ml"
               : 'functioncall))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'varexp) in
    Obj.repr(
# 128 "luaparsex.mly"
                      ( fun args -> A.Funcall (_1, args) )
# 1045 "luaparsex.ml"
               : 'funcvalue))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 129 "luaparsex.mly"
                           ( fun args -> A.Methcall (_1, _3, args) )
# 1053 "luaparsex.ml"
               : 'funcvalue))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprlist) in
    Obj.repr(
# 132 "luaparsex.mly"
                                ( _2 )
# 1060 "luaparsex.ml"
               : 'funcParams))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'table) in
    Obj.repr(
# 133 "luaparsex.mly"
            ( [_1] )
# 1067 "luaparsex.ml"
               : 'funcParams))
; (fun __caml_parser_env ->
    Obj.repr(
# 136 "luaparsex.mly"
                         ( [] )
# 1073 "luaparsex.ml"
               : 'exprlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exprlist1) in
    Obj.repr(
# 137 "luaparsex.mly"
                ( _1 )
# 1080 "luaparsex.ml"
               : 'exprlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "luaparsex.mly"
                  ( [_1] )
# 1087 "luaparsex.ml"
               : 'exprlist1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprlist1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "luaparsex.mly"
                           ( _1 @ [_3] )
# 1095 "luaparsex.ml"
               : 'exprlist1))
; (fun __caml_parser_env ->
    Obj.repr(
# 144 "luaparsex.mly"
                        ( ([], false) )
# 1101 "luaparsex.ml"
               : 'parlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "luaparsex.mly"
                            ( ([], true) )
# 1107 "luaparsex.ml"
               : 'parlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'parlist1) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opt_dots) in
    Obj.repr(
# 146 "luaparsex.mly"
                                ( (_1, _2) )
# 1115 "luaparsex.ml"
               : 'parlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'par) in
    Obj.repr(
# 149 "luaparsex.mly"
                  ( [_1] )
# 1122 "luaparsex.ml"
               : 'parlist1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'parlist1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'par) in
    Obj.repr(
# 150 "luaparsex.mly"
                         ( _1 @ [_3] )
# 1130 "luaparsex.ml"
               : 'parlist1))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "luaparsex.mly"
                          ( false )
# 1136 "luaparsex.ml"
               : 'opt_dots))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "luaparsex.mly"
                            ( true  )
# 1142 "luaparsex.ml"
               : 'opt_dots))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 156 "luaparsex.mly"
           ( _1 )
# 1149 "luaparsex.ml"
               : 'par))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lfieldlist) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'semicolonpart) in
    Obj.repr(
# 159 "luaparsex.mly"
                                      ( (_1, _2) )
# 1157 "luaparsex.ml"
               : 'fieldlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ffieldlist1) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lastcomma) in
    Obj.repr(
# 160 "luaparsex.mly"
                               ( ([], _1) )
# 1165 "luaparsex.ml"
               : 'fieldlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "luaparsex.mly"
                               ( [] )
# 1171 "luaparsex.ml"
               : 'semicolonpart))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ffieldlist) in
    Obj.repr(
# 164 "luaparsex.mly"
                         ( _2 )
# 1178 "luaparsex.ml"
               : 'semicolonpart))
; (fun __caml_parser_env ->
    Obj.repr(
# 167 "luaparsex.mly"
                           ( () )
# 1184 "luaparsex.ml"
               : 'lastcomma))
; (fun __caml_parser_env ->
    Obj.repr(
# 168 "luaparsex.mly"
                      ( () )
# 1190 "luaparsex.ml"
               : 'lastcomma))
; (fun __caml_parser_env ->
    Obj.repr(
# 171 "luaparsex.mly"
                          ( [] )
# 1196 "luaparsex.ml"
               : 'ffieldlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'ffieldlist1) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lastcomma) in
    Obj.repr(
# 172 "luaparsex.mly"
                                    ( _1 )
# 1204 "luaparsex.ml"
               : 'ffieldlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ffield) in
    Obj.repr(
# 175 "luaparsex.mly"
                       ( [_1] )
# 1211 "luaparsex.ml"
               : 'ffieldlist1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ffieldlist1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ffield) in
    Obj.repr(
# 176 "luaparsex.mly"
                               ( _1 @ [_3] )
# 1219 "luaparsex.ml"
               : 'ffieldlist1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 177 "luaparsex.mly"
                               ( (_1, _3) )
# 1227 "luaparsex.ml"
               : 'ffield))
; (fun __caml_parser_env ->
    Obj.repr(
# 179 "luaparsex.mly"
                          ( [] )
# 1233 "luaparsex.ml"
               : 'lfieldlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lfieldlist1) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'lastcomma) in
    Obj.repr(
# 180 "luaparsex.mly"
                             ( _1 )
# 1241 "luaparsex.ml"
               : 'lfieldlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 183 "luaparsex.mly"
                     ([_1])
# 1248 "luaparsex.ml"
               : 'lfieldlist1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lfieldlist1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr1) in
    Obj.repr(
# 184 "luaparsex.mly"
                               ( _1 @ [_3] )
# 1256 "luaparsex.ml"
               : 'lfieldlist1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.lval) in
    Obj.repr(
# 187 "luaparsex.mly"
                 ([_1])
# 1263 "luaparsex.ml"
               : 'varlist1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varlist1) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.lval) in
    Obj.repr(
# 188 "luaparsex.mly"
                        ( _1 @ [_3] )
# 1271 "luaparsex.ml"
               : 'varlist1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'singlevar) in
    Obj.repr(
# 191 "luaparsex.mly"
                  ( A.Lvar _1 )
# 1278 "luaparsex.ml"
               : Ast.lval))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'varexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr1) in
    Obj.repr(
# 192 "luaparsex.mly"
                           ( A.Lindex (_1, _3) )
# 1286 "luaparsex.ml"
               : Ast.lval))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'varexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 193 "luaparsex.mly"
                           ( A.Lindex (_1, A.Lit (A.Value.String _3)) )
# 1294 "luaparsex.ml"
               : Ast.lval))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 196 "luaparsex.mly"
                   ( _1 )
# 1301 "luaparsex.ml"
               : 'singlevar))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.lval) in
    Obj.repr(
# 199 "luaparsex.mly"
             ( match _1 with A.Lvar x -> A.Var x | A.Lindex (t, k) -> A.Index (t, k) )
# 1308 "luaparsex.ml"
               : 'varexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 202 "luaparsex.mly"
                     ( [_1] )
# 1315 "luaparsex.ml"
               : 'localdeclist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'localdeclist) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 203 "luaparsex.mly"
                                  ( _1 @ [_3] )
# 1323 "luaparsex.ml"
               : 'localdeclist))
; (fun __caml_parser_env ->
    Obj.repr(
# 206 "luaparsex.mly"
                         ( [] )
# 1329 "luaparsex.ml"
               : 'decinit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exprlist1) in
    Obj.repr(
# 207 "luaparsex.mly"
                    ( _2 )
# 1336 "luaparsex.ml"
               : 'decinit))
(* Entry chunks *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let chunks (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.chunk list)
;;
# 211 "luaparsex.mly"

end
# 1364 "luaparsex.ml"
